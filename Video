-- @description Mute all tracks with video items
-- @author Justin Chow
-- @version 1.0
-- @about Useful when you have a bunch of video tracks all over your session
--   
--   
-- @link https://github.com/justinchowsound
-- @changelog 
--   10/27/25 - v1.0 add script



-- Mute all tracks with video items (with notification)

reaper.Undo_BeginBlock()

local function log(msg)
    reaper.ShowConsoleMsg(msg .. "\n")
end

local function has_video_item(track)
    local num_items = reaper.CountTrackMediaItems(track)
    local track_name = select(2, reaper.GetTrackName(track)) or "Unnamed"
    log("Checking track: " .. track_name)
    for i = 0, num_items - 1 do
        local item = reaper.GetTrackMediaItem(track, i)
        local num_takes = reaper.GetMediaItemNumTakes(item)
        log("  Item " .. i .. " has " .. num_takes .. " take(s)")
        for j = 0, num_takes - 1 do
            local take = reaper.GetMediaItemTake(item, j)
            local source = reaper.GetMediaItemTake_Source(take)
            if source then
                local source_type = reaper.GetMediaSourceType(source) or "Unknown"
                local filename = reaper.GetMediaSourceFileName(source) or "No filename"
                log("    Take " .. j .. ": Source type = " .. source_type .. ", Filename = " .. filename)
                if source_type == "VIDEO" or (filename:lower():match("%.(mp4|avi|mov|wmv|mkv|flv|webm|mpg|mpeg|vob|ogv|drc|gif|m4v|asf|rm|divx|xvid|m2ts|mts)$")) then
                    log("    Found video item: " .. filename)
                    return true
                end
            else
                log("    Take " .. j .. ": No source found")
            end
        end
    end
    log("  No video items found on this track")
    return false
end

log("Starting script: Mute tracks with video items")
local num_tracks = reaper.CountTracks(0)
local muted_count = 0
log("Total tracks in project: " .. num_tracks)

for i = 0, num_tracks - 1 do
    local track = reaper.GetTrack(0, i)
    if track then
        local track_name = select(2, reaper.GetTrackName(track)) or "Unnamed"
        if has_video_item(track) then
            local current_mute = reaper.GetMediaTrackInfo_Value(track, "B_MUTE")
            log("  Track " .. track_name .. ": Current mute state = " .. current_mute)
            if current_mute == 0 then
                local success = reaper.SetMediaTrackInfo_Value(track, "B_MUTE", 1)
                log("  Attempting to mute track " .. track_name .. ": Success = " .. tostring(success))
                if success then
                    muted_count = muted_count + 1
                    log("  Track " .. track_name .. " muted successfully")
                end
            else
                log("  Track " .. track_name .. " already muted, skipping")
            end
        end
    else
        log("Error: Track " .. i .. " is invalid")
    end
end

-- Show notification with number of tracks muted
reaper.MB(string.format("Muted %d track(s) with video items.", muted_count), "Script Result", 0)

reaper.UpdateArrange()
reaper.Undo_EndBlock("Mute tracks with video items", -1)
log("Script completed")
